NOTASI ALGORITMIK

procedure tictactoe
{ Permainan tic-tac-toe dengan ukuran 3x3 }
{ I.S. Program berjalan }
{ F.S. Salah satu pemain menang atau permainan seri }

KAMUS LOKAL
    { FUNGSI DAN PROSEDUR }
        function checkwin (papan : array of array of char) -> boolean  { mengecek apakah sudah ada yang menang atau belum }
        function validasi (X,Y: string, papan : array of array of char) -> boolean  { mengecek apakah input valid }
        procedure printpapan (input papan : array of array of char)  { mencetak papan tic-tac-toe ke layar }
        function giliran (pemain : string, papan : array of array of char) -> array of array of char  { Meminta input pada giliran pemain }
    { VARIABEL }
        row,col : integer
        papan : array of array of char
        win : boolean
        langkah : integer
    
ALGORITMA
    output("Legenda:")
    output("# Kosong")
    output("X Pemain 1")
    output("O Pemain 2")
    output()
    output("Status Papan")
    
    row traversal [0..4]
        col traversal [0..4]
            papan[row][col] <- '#'   { membuat array papan }
    
    printpapan(papan)   { cetak papan ke layar }
    output()
    
    win <- False
    langkah <- 0
    while (not (win)) and (langkah <= 9) do   { game dimulai }
        papan <- giliran('X', papan)   { meminta giliran pemain X }
        langkah <- langkah + 1   { langkah ditambahkan satu }
        win <- checkwin(papan)   { cek apakah pemain X menang atau tidak }
        if win then   { jika pemain X menang }
            output('Pemain "X" menang!')
        else if (langkah < 9) then   { jika belum menang dan langkah masih valid (< 9) }
            papan <- giliran('O', papan)   { meminta giliran pemain Y }
            langkah <- langkah + 1   { langkah ditambahkan satu }
            win <- checkwin(papan)   { cek apakah pemain Y menang atau tidak }
            if win then   { jika pemain Y menang }
                output('Pemain "O" menang!')
        else   { jika langkah ke-9 dan belum ada yang menang }
            break
    if (not (checkwin(papan))) and (langkah >= 9) then   { jika langkah ke-9 dan belum ada yang menang }
        output("Seri. Tidak ada pemenang.")   { permainan seri }


function checkwin (papan : array of array of char) -> boolean
{ mengecek apakah sudah ada yang menang atau belum }
KAMUS LOKAL
    i,j : integer
ALGORITMA
    i traversal [1..4]
        if (papan[i][1]+papan[i][2]+papan[i][3]=='XXX') or (papan[i][1]+papan[i][2]+papan[i][3]=='OOO') then
            -> True   { jika menang dengan garis horizontal }
    j traversal [1..4]
        if (papan[1][j]+papan[2][j]+papan[3][j]=='XXX') or (papan[1][j]+papan[2][j]+papan[3][j]=='OOO') then
            -> True   { jika menang dengan garis vertikal }
    if (papan[1][1]+papan[2][2]+papan[3][3]=='XXX') or (papan[1][1]+papan[2][2]+papan[3][3]=='OOO') then
        -> True   { jika menang dengan garis diagonal }
    else if (papan[1][3]+papan[2][2]+papan[3][1]=='XXX)' or (papan[1][3]+papan[2][2]+papan[3][1]=='OOO') then
        -> True   { jika menang dengan garis diagonal }
    else
        -> False   { jika tidak ada garis yang terbentuk }


function validasi (X,Y: string, papan : array of array of char) -> boolean
{ mengecek apakah input valid }
KAMUS LOKAL
    simbol = '#'   # constant simbol : string = '#'
ALGORITMA
    if (X < 1) or (X > 3) or (Y < 1) or (Y > 3) then
        output('Kotak tidak valid.')   { input di luar range kotak 3x3 }
        -> False
    else if (papan[X][Y] != simbol) then
        output('Kotak sudah terisi. Silakan pilih kotak lain.')   { input di kotak yang sudah terisi }
        -> False
    else   { input valid }
        -> True


procedure printpapan (input papan : array of array of char)
{ mencetak papan tic-tac-toe ke layar }
{ I.S. Array papan sudah terdefinisi }
{ F.s. Isi array papan dicetak ke layar }
KAMUS LOKAL
    row : integer
ALGORITMA
    row traversal [1,4]
        output(papan[row][1]+papan[row][2]+papan[row][3])


function giliran (pemain : string, papan : array of array of char) -> array of array of char
{ Meminta input pada giliran pemain }
KAMUS LOKAL
    valid : boolean
    X,Y : string
ALGORITMA
    output(f"Giliran Pemain {pemain}")  
    valid <- False
    while (not(valid)) do   { terus meminta input sampai valid }
        input(X)
        input(Y)
        valid <- validasi(X,Y, papan)   { cek validasi }
    papan[X][Y] <- pemain   { mengisi input ke kotak }

    output("Status Papan") 
    printpapan(papan)   { mencetak papan ke layar }
    output()
    -> papan