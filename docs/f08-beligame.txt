NOTASI ALGORITMIK

function buy_game (user,game,kepemilikan,riwayat,user_inventory,user_id : array of array of string) -> array of array of string, array of array of string
{ Membeli game sehingga game masuk ke dalam data kepemilikan (inventory) user }

KAMUS LOKAL
    { FUNGSI DAN PROSEDUR }
        common.iterLength(iterable: string or array) -> integer
        common.remove_thousands(numstr : string) -> string
    { VARIABEL }
        i : integer
        id_game : string
        found : boolean

ALGORITMA
    input(id_game)

    { mencari id game di game.csv }
    found <- False
    i traversal [1..common.iterLength(user_inventory)]
        if id_game = user_inventory[i][0] then
            { jika game sudah pernah dibeli (ada di user_inventory) }
            output("Anda sudah memiliki Game tersebut")
            found <- True   { game ditemukan }
    
    if found = False then
        { jika game belum pernah dibeli (tidak ada di user_inventory) }
        i traversal [2..common.iterLength(game)]
            if id_game = game[i][0] and int(game[i][5])>0 then
                { mencari id game dan jika stok game > 0 }
                if int(common.remove_thousands(game[i][4])) <= int(user[user_id+1][5]) then
                    { jika saldo user cukup }
                    output("Game " + '"%s"' % id_game + " berhasil dibeli!")
                    kepemilikan <- kepemilikan + [[id_game,str(user_id)]]   { menambahkan data game ke kepemilikan }
                    riwayat <- riwayat + [[id_game,game[i][1],game[i][4],str(user_id),datetime.date.today().year]]   { menambahkan data game ke riwayat }
                else   { jika saldo user tidak cukup }
                    output("Saldo anda tidak cukup untuk membeli Game tersebut!")
            else if id_game = game[i][0]:   { jika stoknya nol (0) }
                output("Stok Game tersebut sedang habis!")
                break      
    -> kepemilikan, riwayat
